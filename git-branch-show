#!/bin/bash
set -euo pipefail
function show_usage() {
    cat <<USAGE
git-branch-show

    Shows a git blob date.

Usage:      git-show-date [ -ah ] | [ <blob> ]

    -a      Show all local branches.
    -h      Show this help and exit.
    <blob>  The git blob to show the date.

USAGE
}

# git for-each-ref --sort='-committerdate' --format='%(refname)%09%(committerdate)' refs/heads | sed -e 's-refs/heads/--'
# https://stackoverflow.com/questions/43535132/given-a-commit-id-how-to-determine-if-current-branch-contains-the-commit
# https://coderwall.com/p/7fp5dg/finding-git-branches-which-contain-the-specified-commit

function show_date() {
    local blob; blob="$1"
    local pretty_blob; pretty_blob="${blob#remotes/}"
    pretty_blob="${pretty_blob#origin/}"
    pretty_blob="$(printf "%-35.35s" "$pretty_blob")"
    git show --pretty="tformat:%<(25)%ai $pretty_blob %<(20,trunc)%an %s" --quiet "$blob"
}

if (( $# == 0 ))
then
    show_date "$(git rev-parse --abbrev-ref HEAD)"
    exit 0
fi

script_name="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"/"$(basename "${BASH_SOURCE[0]}")"

if [ "$1" = "-h" ]
then
    show_usage
    exit 0
elif [ "$1" = "-a" ]
then
    git branch | sed -e 's/*//g' | xargs "$script_name" | sort
    exit 0
fi

while (( $# > 0 ))
do
    show_date "$1"
    shift
done
